inPath  <- paste(INPUT_FOLDER, fname, sep="/")
outPath  <-  paste(paste(OUTPUT_FOLDER, username, sep = "/"), ".csv", sep="")
if(!file.exists(outPath)) {
print(paste("PROCESSING USER", id, "/", (N-1)))
uLabels <- filter(labels, labels$id==username)
inPath %>%
readNiftiFiles() %>%
countDataframe(username, uLabels[2]) %>%
writeFrameToFile(outPath)
}
}
}
print("DONE!")
#################################################
# LIBRARIES
#################################################
library(tidyverse)
library(oro.dicom)
library(oro.nifti)
library(plot3D)
library(neurobase)
library(scales)
setwd("~/Work/machine-learning/kaagle/data_science_bowl_2017")
#################################################
# CONSTANTS
#################################################
# Sample input directory
INPUT_FOLDER <- './sample_frames'
# Sample output directory
OUTPUT_FOLDER <- './sample_frame_summary'
#################################################
# FUNCTIONS
#################################################
writeFrameToFile <- function(dataframe, path) {
print(" Storing user nifti")
summary(dataframe)
write.csv(dataframe, path)
}
###############################################################################
# ALGORITHM
# @Description This algorithm performs preprocessing of dicoms files. In
# particular:
#   1) Read the dicoms files
#   2) Rescale dicoms data with slope and intercept
#   3) Convert dicoms to nifti format
#   5) Stores the nifti object to file
#   6) Add user to list of preprocessed users
###############################################################################
t1 <- Sys.time()
# Our Patients
patients <- (list.files(INPUT_FOLDER))
mydata <- read.csv(paste(INPUT_FOLDER, patients[[1]], sep="/"))
outPath  <-  paste(paste(OUTPUT_FOLDER, "dsbowl_data", sep = "/"), ".csv")
for(p in patients) {
if((p != patients[[1]])) {
print(paste("PROCESSING USER", p))
fname <- read.csv(paste(INPUT_FOLDER, p, sep="/"))
mydata <- rbind(mydata, fname)
}
}
writeFrameToFile(mydata, outPath)
mydata
print("DONE!")
#################################################
# LIBRARIES
#################################################
library(tidyverse)
library(rpart)
setwd("~/Work/machine-learning/kaagle/data_science_bowl_2017")
#################################################
# CONSTANTS
#################################################
# Sample input directory
INPUT_FOLDER <- './sample_frame_summary'
# Sample output directory
OUTPUT_FOLDER <- './sample_submissions'
#################################################
# FUNCTIONS
#################################################
writeSubmission <- function(dataframe, path) {
print(" Storing submission data")
summary(dataframe)
write.csv(dataframe, path)
}
###############################################################################
# ALGORITHM
# @Description This algorithm runs a machine learning algorithm using the pre-
# processed data:
#   1) Read the data from csv file 'dslbowl_data'
#   2) Use a decision tree to predict cancer
#   3) Use a random forest to predict cancer
#   5) Use kmeans to predict cancer
#   6) Compare approaches and future work
###############################################################################
t1 <- Sys.time()
# Our Patients
patients <- (list.files(INPUT_FOLDER))
print(paste("Loading train data", patients[[1]]))
mydata <- read.csv(paste(INPUT_FOLDER, patients[[1]], sep="/"), stringsAsFactors = FALSE)
View(mydata)
str(mydata)
mydata$cancer <- as.factor(mydata$cancer)
# Create rpart model
tree <- rpart(Cancer ~ ., mydata)
str(mydata)
View(mydata)
#################################################
# LIBRARIES
#################################################
library(tidyverse)
library(rpart)
setwd("~/Work/machine-learning/kaagle/data_science_bowl_2017")
#################################################
# CONSTANTS
#################################################
# Sample input directory
INPUT_FOLDER <- './sample_frame_summary'
# Sample output directory
OUTPUT_FOLDER <- './sample_submissions'
#################################################
# FUNCTIONS
#################################################
writeSubmission <- function(dataframe, path) {
print(" Storing submission data")
summary(dataframe)
write.csv(dataframe, path)
}
###############################################################################
# ALGORITHM
# @Description This algorithm runs a machine learning algorithm using the pre-
# processed data:
#   1) Read the data from csv file 'dslbowl_data'
#   2) Use a decision tree to predict cancer
#   3) Use a random forest to predict cancer
#   5) Use kmeans to predict cancer
#   6) Compare approaches and future work
###############################################################################
t1 <- Sys.time()
# Our Patients
patients <- (list.files(INPUT_FOLDER))
print(paste("Loading train data", patients[[1]]))
mydata <- read.csv(paste(INPUT_FOLDER, patients[[1]], sep="/"))
View(mydata)
str(mydata)
mydata$cancer <- as.factor(mydata$cancer)
# Create rpart model
tree <- rpart(Cancer ~ ., mydata)
#################################################
# LIBRARIES
#################################################
library(tidyverse)
library(oro.dicom)
library(oro.nifti)
library(plot3D)
library(neurobase)
library(scales)
setwd("~/Work/machine-learning/kaagle/data_science_bowl_2017")
#################################################
# CONSTANTS
#################################################
# Sample input directory
INPUT_FOLDER <- './sample_niftis'
# Sample output directory
OUTPUT_FOLDER <- './sample_frames'
#################################################
# FUNCTIONS
#################################################
readNiftiFiles <- function(path) {
print(" Reading nifti files")
niftis <- readNIfTI(path)
return(niftis)
}
centerOfMass <- function(indexes) {
sumX <- sum(indexes[,1])
sumY <- sum(indexes[,2])
sumZ <- sum(indexes[,3])
m <- length(indexes)
result <- c(M = m, CM_X = sumX/m, CM_Y=sumY/m, CM_Z=sumZ/m)
return(result)
}
countDataframe <- function(niftis, userId, cancer) {
print(" Creating data frame")
fit <- kmeans(niftis, centers = 16)
print("Calculating Center of Mass (CoM) of each cluster")
(cancer)
userData <- c()
(userData["id"] <- userId)
(userData["cancer"] <- cancer)
for(i in 1:16) {
klass <- niftis[fit$cluster == i]
indexes <- which(niftis@.Data == klass, arr.ind=TRUE)
com <- centerOfMass(indexes)
userData[paste("K",i,sep="")] <- fit$centers[[i]]
userData[paste("M",i,sep="")] <- com[1]
userData[paste("CM_X",i,sep="")] <- com[2]
userData[paste("CM_Y",i,sep="")] <- com[3]
userData[paste("CM_Z",i,sep="")] <- com[4]
}
print(paste("Added data ", userData))
return(t(userData))
}
writeFrameToFile <- function(dataframe, path) {
print(" Storing user data frame")
summary(dataframe)
write.csv(dataframe, path)
}
###############################################################################
# ALGORITHM
# @Description This algorithm performs preprocessing of dicoms files. In
# particular:
#   1) Read the dicoms files
#   2) Rescale dicoms data with slope and intercept
#   3) Convert dicoms to nifti format
#   5) Stores the nifti object to file
#   6) Add user to list of preprocessed users
###############################################################################
t1 <- Sys.time()
# Sample Labels
labels <- read.csv('./stage1_labels.csv', header = TRUE)
# Our Patients
patients <- (list.files(INPUT_FOLDER))
N <- length(patients)
#N <- 5
for(id in 1:N) {
(fname     <- patients[[id]])
if(endsWith(fname, ".nii.gz")) {
username <- sub(fname, pattern = ".nii.gz", replacement = "")
inPath  <- paste(INPUT_FOLDER, fname, sep="/")
outPath  <-  paste(paste(OUTPUT_FOLDER, username, sep = "/"), ".csv", sep="")
if(!file.exists(outPath)) {
print(paste("PROCESSING USER", id, "/", (N-1)))
uLabels <- filter(labels, labels$id==username)
inPath %>%
readNiftiFiles() %>%
countDataframe(username, uLabels[2]) %>%
writeFrameToFile(outPath)
}
}
}
View(labels)
print("DONE!")
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
reg     <- run_subproblem(reg,     train_data$TrainX, train_data$TrainY)
reg     <- run_subproblem(reg,     train_data$TrainX, train_data$TrainY)
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
OUT_DIR       <- paste(STAGE1_DIR, "images_data", sep = "/")
library(tidyverse)
library(data.table)
library(mxnet)
library(nnet)
source(file = '~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Lib.R')
source(file = '~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Lib_NN.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
INPUT_DIR     <- paste(STAGE1_DIR, "images_resized", "train_data", sep = "/")
source(file = '~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Lib.R')
source(file = '~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Lib_NN.R')
INPUT_DIR     <- paste(STAGE1_DIR, "images_resized", "train_data", sep = "/")
OUT_DIR       <- paste(STAGE1_DIR, "images_data", sep = "/")
MY_LABELS   <- read.csv(LABELS_FILE
, header = TRUE, stringsAsFactors = FALSE)
USERNAMES   <- list.dirs(path = paste(STAGE1_DIR, "images", sep="/"), full.names = FALSE, recursive = FALSE)
labels_0  <- filter(MY_LABELS, (MY_LABELS$cancer == 0))
labels_1  <- filter(MY_LABELS, (MY_LABELS$cancer == 1))
all_labels <- rbind(labels_0, labels_1)
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
N <- nrow(MY_LABELS)
train_labels <- sample(MY_LABELS, .8*N)
K <- 0.8*N
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
K <- floor(0.8*N)
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
train_labels <- MY_LABELS[1:K,]
test_labels <- MY_LABELS[-K,]
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
test_labels <- MY_LABELS[-(1:K),]
train_labels <- MY_LABELS[1:K,]
test_labels <- MY_LABELS[-(1:K),]
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
source('~/Work/machine-learning/kaagle/data_science_bowl_2017/stage_1/Stage1_Train_Multiple.R')
setwd('/Users/zua/Work/apps/flex-app/src/main/java/db')
wd
wd()
read.csv(file = "World_Cities_Location_table.csv")
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE)
dataset
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE, sep = ";")
dataset
dataset[dataset$Country=='USA']
dataset[dataset$Country=='Albania']
dataset[dataset$Country=='Albania']
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE, sep = ";")
dataset
dataset[dataset$Country=='Albania']
dataset[which(dataset$Country=="Albania")]
indexes <- which(dataset$Country=="Albania")
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE, sep = ";")
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE, sep = ";")
dataset
indexes <- which(dataset$Country=="Albania")
dataset[indexes,]
countries <- unique(dataset$Country)
countries
dataset <- read.csv(file = "World_Cities_Location_table.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
dataset
indexes <- which(dataset$Country=="Albania")
dataset[indexes,]
countries <- unique(dataset$Country)
countries
cities <- unique(dataset$City)
cities
